plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace = "com.jesusbadenas.kotlin_clean_compose_project"
    compileSdk = rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.jesusbadenas.kotlin_clean_compose_project"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildFeatures {
        buildConfig = true
        compose = true
        dataBinding = true
        viewBinding = true
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources = false
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    composeOptions {
        kotlinCompilerExtensionVersion = rootProject.ext.kotlinCompilerExtensionVersion
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    testOptions {
        unitTests {
            all {
                useJUnitPlatform()
            }
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':data')
    implementation project(':domain')
    implementation project(':presentation')

    implementation rootProject.ext.androidAppCompat
    implementation rootProject.ext.androidCoreKtx
    implementation rootProject.ext.compose
    implementation rootProject.ext.composeRuntime
    implementation rootProject.ext.koinAndroid
    implementation rootProject.ext.kotlin
    implementation rootProject.ext.timber

    coreLibraryDesugaring rootProject.ext.desugar

    androidTestImplementation project(':test')
    androidTestImplementation rootProject.ext.androidXJUnitKtx
    androidTestImplementation rootProject.ext.androidXTestCoreKtx
    androidTestImplementation rootProject.ext.androidXTestRules
    androidTestImplementation rootProject.ext.androidXTestRunner
    androidTestImplementation rootProject.ext.compose
    androidTestImplementation rootProject.ext.composeUiTest
    androidTestImplementation rootProject.ext.espresso
    androidTestImplementation rootProject.ext.espressoContrib
    androidTestImplementation rootProject.ext.fragmentTest
    androidTestImplementation rootProject.ext.koinTest
    androidTestImplementation rootProject.ext.koinJunit4Test
}
